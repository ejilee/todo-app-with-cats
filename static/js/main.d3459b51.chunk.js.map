{"version":3,"sources":["components/InputForm.js","components/TodoCats.js","components/TodoListItem.js","components/TodoList.js","components/CatsList.js","components/CatsModal.js","App.js","serviceWorker.js","index.js"],"names":["InputForm","cats","todoItemAdd","useState","inputValue","setInputValue","catValue","setCatValue","prioValue","setPrioValue","inputOnChange","useCallback","e","target","value","catOnChange","parseInt","prioOnChange","onSubmit","preventDefault","className","type","placeholder","onChange","map","cat","id","key","name","htmlFor","style","color","alt","defaultChecked","React","memo","todos","openCatsModal","length","filter","todo","cate","onClick","todoItemToggle","todoItemRemove","checked","prior","text","find","data-id","data-priority","undefined","CatsList","catRemove","count","deleteMessage","window","confirm","onlickDelete","catsModalState","closeCatsModal","catAdd","catsModalClass","console","log","catsData","sort","bulkStartNum","createBulkTodos","array","i","push","todoReducer","action","concat","todoItemId","catsReducer","newCat","catItemId","App","useReducer","dispatchTodo","dispatchCats","setCatsModalState","nextTodoId","useRef","nextCatId","current","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d3459b51.chunk.js","sourcesContent":["import React, { useState, useCallback } from 'react';\r\nimport './InputForm.scss';\r\nimport { IoIosAddCircleOutline, IoIosFlag } from 'react-icons/io';\r\n\r\nconst InputForm = ({ cats, todoItemAdd }) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n    const [catValue, setCatValue] = useState(0);\r\n    const [prioValue, setPrioValue] = useState(4);\r\n\r\n    const inputOnChange = useCallback(e => {\r\n        setInputValue(e.target.value);\r\n    }, []);\r\n\r\n    const catOnChange = useCallback(e => {\r\n        setCatValue(parseInt(e.target.value));\r\n    }, []);\r\n\r\n    const prioOnChange = useCallback(e => {\r\n        setPrioValue(parseInt(e.target.value));\r\n    }, []);\r\n\r\n    const onSubmit = useCallback(\r\n        e => {\r\n            todoItemAdd(inputValue, catValue, prioValue);\r\n            setInputValue('');\r\n            e.preventDefault();\r\n        },\r\n        [todoItemAdd, inputValue, catValue, prioValue],\r\n    );\r\n\r\n    return (\r\n        <div className=\"inputBox\">\r\n            <form onSubmit={onSubmit}>\r\n                <input\r\n                    className=\"todoInputText\"\r\n                    type=\"text\"\r\n                    placeholder=\"new entry\"\r\n                    value={inputValue}\r\n                    onChange={inputOnChange}\r\n                />\r\n                <button className=\"todoInputButton\" type=\"submit\">\r\n                    <IoIosAddCircleOutline />\r\n                </button>\r\n                <div className=\"inputOptionCat\">\r\n                    <select onChange={catOnChange}>\r\n                        {cats.map(cat => (\r\n                            <option value={cat.id} key={cat.id}>\r\n                                {cat.name}\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n                <div className=\"inputOptionPrio\">\r\n                    <input\r\n                        type=\"radio\"\r\n                        id=\"inputPriority1\"\r\n                        name=\"inputPriority\"\r\n                        value=\"1\"\r\n                        onChange={prioOnChange}\r\n                    />\r\n                    <label htmlFor=\"inputPriority1\">\r\n                        <IoIosFlag\r\n                            style={{ color: '#df5c74' }}\r\n                            alt=\"priority_high\"\r\n                        />\r\n                    </label>\r\n                    <input\r\n                        type=\"radio\"\r\n                        id=\"inputPriority2\"\r\n                        name=\"inputPriority\"\r\n                        value=\"2\"\r\n                        onChange={prioOnChange}\r\n                    />\r\n                    <label htmlFor=\"inputPriority2\">\r\n                        <IoIosFlag\r\n                            style={{ color: '#375077' }}\r\n                            alt=\"priority_medium\"\r\n                        />\r\n                    </label>\r\n                    <input\r\n                        type=\"radio\"\r\n                        id=\"inputPriority3\"\r\n                        name=\"inputPriority\"\r\n                        value=\"3\"\r\n                        onChange={prioOnChange}\r\n                        defaultChecked\r\n                    />\r\n                    <label htmlFor=\"inputPriority3\">\r\n                        <IoIosFlag\r\n                            style={{ color: '#999' }}\r\n                            alt=\"priority_low\"\r\n                        />\r\n                    </label>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default InputForm;\r\n","import React from 'react';\r\nimport './TodoCats.scss';\r\nimport { IoIosCog } from 'react-icons/io';\r\n\r\nconst TodoCats = ({ cats, todos, openCatsModal }) => {\r\n    return (\r\n        <div>\r\n            <ul className=\"TodoListCatsList\">\r\n                <li className=\"TodoListCat currentCat\">all ({todos.length})</li>\r\n                {cats.map(cat => (\r\n                    <li className=\"TodoListCat\" key={cat.id}>\r\n                        {cat.name} (\r\n                        {todos.filter(todo => todo.cate === cat.id).length})\r\n                    </li>\r\n                ))}\r\n                <li\r\n                    className=\"TodoListCat TodoListCatAdd\"\r\n                    onClick={() => openCatsModal()}\r\n                >\r\n                    <IoIosCog />\r\n                </li>\r\n            </ul>\r\n            <div className=\"TodoListCatsListBottom\"></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default React.memo(TodoCats);\r\n","import React from 'react';\r\nimport {\r\n    IoIosRemoveCircleOutline,\r\n    IoMdCreate,\r\n    IoMdSquareOutline,\r\n    IoIosCheckboxOutline,\r\n} from 'react-icons/io';\r\nimport './TodoListItem.scss';\r\n\r\nconst TodoListItem = ({ cats, todo, todoItemToggle, todoItemRemove }) => {\r\n    const { id, checked, cate, prior, text } = todo;\r\n    const cat = cats.find(cat => cat.id === cate);\r\n    return (\r\n        <li\r\n            className={\r\n                `todoListItem todoListPriority` +\r\n                prior +\r\n                ` todoChecked_` +\r\n                checked\r\n            }\r\n            data-id={id}\r\n            data-priority={prior}\r\n        >\r\n            <button className=\"checkBox\" onClick={() => todoItemToggle(id)}>\r\n                {checked ? <IoIosCheckboxOutline /> : <IoMdSquareOutline />}\r\n            </button>\r\n            <span className=\"todoText\">{text || '-'}</span>\r\n            {cat !== undefined && cat.id !== 0 ? (\r\n                <span className=\"catLabel\">{cat.name || '-'}</span>\r\n            ) : null}\r\n            <button className=\"editButton\">\r\n                <IoMdCreate />\r\n            </button>\r\n            <button className=\"deleteButton\" onClick={() => todoItemRemove(id)}>\r\n                <IoIosRemoveCircleOutline />\r\n            </button>\r\n        </li>\r\n    );\r\n};\r\n\r\nexport default React.memo(TodoListItem);\r\n","import React from 'react';\r\nimport TodoListItem from './TodoListItem';\r\nimport './TodoList.scss';\r\n\r\nconst TodoList = ({ cats, todos, todoItemToggle, todoItemRemove }) => {\r\n    return (\r\n        <div className=\"TodoListPage\">\r\n            <ul>\r\n                {todos.map(todo => (\r\n                    <TodoListItem\r\n                        cats={cats}\r\n                        todo={todo}\r\n                        key={todo.id}\r\n                        todoItemToggle={todoItemToggle}\r\n                        todoItemRemove={todoItemRemove}\r\n                    />\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default React.memo(TodoList);\r\n","import React from 'react';\r\nimport { IoIosRemoveCircleOutline, IoMdCreate } from 'react-icons/io';\r\nimport './CatsList.scss';\r\n\r\nconst CatsList = ({ todos, cats, catRemove }) => {\r\n    const onlickDelete = (id, name, count) => {\r\n        let deleteMessage =\r\n            'You have  ' +\r\n            count +\r\n            '  todo items in this category :  ' +\r\n            name +\r\n            '\\n' +\r\n            '\\n' +\r\n            'These todo items will be listed under uncategorized.' +\r\n            '\\n' +\r\n            'Are you sure you want to delete this category?';\r\n\r\n        if (id !== 0 && count === 0) {\r\n            catRemove(id);\r\n        } else if (id !== 0 && count > 0 && window.confirm(deleteMessage)) {\r\n            catRemove(id);\r\n        } else {\r\n            return;\r\n        }\r\n    };\r\n    return (\r\n        <ul className=\"catsList\">\r\n            {cats.map(cat => (\r\n                <li className=\"catsListItem\" data-id={cat.id} key={cat.id}>\r\n                    <span>\r\n                        {cat.name} (\r\n                        {todos.filter(todo => todo.cate === cat.id).length})\r\n                    </span>\r\n                    {cat.id !== 0 ? (\r\n                        <div>\r\n                            <button className=\"editButton\">\r\n                                <IoMdCreate />\r\n                            </button>\r\n                            <button\r\n                                className=\"deleteButton\"\r\n                                onClick={() =>\r\n                                    onlickDelete(\r\n                                        cat.id,\r\n                                        cat.name,\r\n                                        todos.filter(\r\n                                            todo => todo.cate === cat.id,\r\n                                        ).length,\r\n                                    )\r\n                                }\r\n                            >\r\n                                <IoIosRemoveCircleOutline />\r\n                            </button>\r\n                        </div>\r\n                    ) : null}\r\n                </li>\r\n            ))}\r\n        </ul>\r\n    );\r\n};\r\n\r\nexport default CatsList;\r\n","import React, { useState, useCallback } from 'react';\r\nimport './CatsModal.scss';\r\nimport { IoIosAddCircleOutline } from 'react-icons/io';\r\nimport CatsList from './CatsList.js';\r\n\r\nconst CatsModal = ({\r\n    todos,\r\n    catsModalState,\r\n    cats,\r\n    closeCatsModal,\r\n    catAdd,\r\n    catRemove,\r\n}) => {\r\n    const catsModalClass = catsModalState ? 'modalTrue' : 'modalFalse';\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const inputOnChange = useCallback(e => {\r\n        setInputValue(e.target.value);\r\n    }, []);\r\n\r\n    const onSubmit = useCallback(\r\n        e => {\r\n            console.log(inputValue);\r\n            catAdd(inputValue);\r\n            setInputValue('');\r\n            e.preventDefault();\r\n        },\r\n        [inputValue, catAdd],\r\n    );\r\n\r\n    return (\r\n        <div className={'modalWrapper ' + catsModalClass}>\r\n            <div className=\"catsModal\">\r\n                <button className=\"closeModal\" onClick={closeCatsModal}>\r\n                    X\r\n                </button>\r\n                <h3>Manage Categories</h3>\r\n\r\n                <CatsList todos={todos} cats={cats} catRemove={catRemove} />\r\n\r\n                <form onSubmit={onSubmit}>\r\n                    <input\r\n                        className=\"todoInputText\"\r\n                        type=\"text\"\r\n                        placeholder=\"new category\"\r\n                        value={inputValue}\r\n                        onChange={inputOnChange}\r\n                    />\r\n                    <button className=\"catAdd\" type=\"submit\">\r\n                        <IoIosAddCircleOutline />\r\n                    </button>\r\n                </form>\r\n            </div>\r\n            <div className=\"modalBg\" onClick={closeCatsModal}></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default React.memo(CatsModal);\r\n","import React, { useState, useRef, useCallback, useReducer } from 'react';\nimport './App.scss';\nimport InputForm from './components/InputForm';\nimport TodoCats from './components/TodoCats';\nimport TodoList from './components/TodoList';\nimport CatsModal from './components/CatsModal.js';\n\n// initial data array for categories\nconst catsData = [\n    {\n        id: 0,\n        sort: 0,\n        name: '-',\n    },\n    {\n        id: 1,\n        sort: 1,\n        name: 'people',\n    },\n    {\n        id: 2,\n        sort: 2,\n        name: 'cats',\n    },\n    {\n        id: 3,\n        sort: 3,\n        name: 'dogs',\n    },\n    {\n        id: 4,\n        sort: 4,\n        name: 'plants',\n    },\n];\n\nconst bulkStartNum = 3;\n\nfunction createBulkTodos() {\n    const array = [];\n    for (let i = 1; i <= bulkStartNum; i++) {\n        array.push({\n            id: i,\n            checked: false,\n            cate: 0,\n            prior: 3,\n            text: `todo item #${i}`,\n        });\n    }\n    return array;\n}\n\nfunction todoReducer(todos, action) {\n    switch (action.type) {\n        case 'INSERT':\n            console.log('add t');\n            return todos.concat(action.todo);\n        case 'REMOVE':\n            console.log('remove t');\n            return todos.filter(todo => todo.id !== action.todoItemId);\n        case 'TOGGLE':\n            console.log('toggle t');\n            return todos.map(todo =>\n                todo.id === action.todoItemId\n                    ? { ...todo, checked: !todo.checked }\n                    : todo,\n            );\n        default:\n            return todos;\n    }\n}\n\nfunction catsReducer(cats, action) {\n    switch (action.type) {\n        case 'INSERT':\n            console.log('add cat');\n            return cats.concat(action.newCat);\n        case 'REMOVE':\n            console.log('remove cat');\n\n            return cats.filter(cat => cat.id !== action.catItemId);\n        default:\n            return cats;\n    }\n}\n\nfunction App() {\n    const [todos, dispatchTodo] = useReducer(\n        todoReducer,\n        undefined,\n        createBulkTodos,\n    );\n    const [cats, dispatchCats] = useReducer(catsReducer, catsData);\n    const [catsModalState, setCatsModalState] = useState(false);\n    let nextTodoId = useRef(bulkStartNum + 1);\n    let nextCatId = useRef(5);\n\n    // function - add new todo item\n    const todoItemAdd = useCallback((inputValue, catValue, prioValue) => {\n        const todo = {\n            id: nextTodoId.current,\n            checked: false,\n            cate: catValue,\n            prior: prioValue,\n            text: inputValue,\n        };\n        dispatchTodo({ type: 'INSERT', todo });\n        nextTodoId.current += 1;\n    }, []);\n\n    // function - remove todo item\n    const todoItemRemove = useCallback(todoItemId => {\n        dispatchTodo({ type: 'REMOVE', todoItemId });\n    }, []);\n\n    // function - toggle checkbox for todo item\n    const todoItemToggle = useCallback(todoItemId => {\n        dispatchTodo({ type: 'TOGGLE', todoItemId });\n    }, []);\n\n    const openCatsModal = useCallback(() => {\n        setCatsModalState(true);\n    }, []);\n\n    const closeCatsModal = useCallback(() => {\n        setCatsModalState(false);\n    }, []);\n\n    // function - add new todo item\n    const catAdd = useCallback(inputValue => {\n        const newCat = {\n            id: nextCatId.current,\n            sort: 2,\n            name: inputValue,\n        };\n        dispatchCats({ type: 'INSERT', newCat });\n        nextCatId.current += 1;\n    }, []);\n\n    // function - remove todo item\n    const catRemove = useCallback(catItemId => {\n        dispatchCats({ type: 'REMOVE', catItemId });\n    }, []);\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">Kitty Needs Kibbles</header>\n            <main className=\"App-main\">\n                <CatsModal\n                    todos={todos}\n                    catsModalState={catsModalState}\n                    cats={cats}\n                    closeCatsModal={closeCatsModal}\n                    catAdd={catAdd}\n                    catRemove={catRemove}\n                />\n                <InputForm cats={cats} todoItemAdd={todoItemAdd} />\n                <TodoCats\n                    cats={cats}\n                    todos={todos}\n                    openCatsModal={openCatsModal}\n                />\n                <TodoList\n                    cats={cats}\n                    todos={todos}\n                    todoItemToggle={todoItemToggle}\n                    todoItemRemove={todoItemRemove}\n                />\n            </main>\n            <footer className=\"App-footer\">you need new socks in 2020</footer>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}